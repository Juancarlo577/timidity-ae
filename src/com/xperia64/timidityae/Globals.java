/*******************************************************************************
 * Copyright (C) 2014 xperia64 <xperiancedapps@gmail.com>
 * 
 * Copyright (C) 1999-2008 Masanao Izumo <iz@onicos.co.jp>
 *     
 * Copyright (C) 1995 Tuukka Toivonen <tt@cgs.fi>
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 ******************************************************************************/
package com.xperia64.timidityae;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;

import com.xperia64.timidityae.R;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.media.AudioFormat;
import android.media.AudioTrack;
import android.os.AsyncTask;
import android.os.Environment;
import android.preference.PreferenceManager;

public class Globals {
public static int isPlaying = 1;
public static ArrayList<String> plist; // Because arguments don't like big things.
public static Bitmap currArt;


public static String autoSoundfontHeader="#<--------Config Generated By Timidity AE (DO NOT MODIFY)-------->";

// Fragment Keys
public static String currFoldKey="CURRENT_FOLDER";
public static String currPlistDirectory="CURRENT_PLIST_DIR";
public static boolean shouldRestore=false;
// Resampling Algorithms
public static String[] sampls = {"CSPLINE","LAGRANGE","GAUSS","NEWTON","LINEAR","NONE"};
// File filters
public static String musicFiles = "*.mid*.smf*.kar*.mod*.xm*.s3m*.it*.669*.amf*.dsm*.far*.gdm*.imf*.med*.mtm*.stm*.stx*.ult*.uni*.mp3*.m4a*.wav*.ogg*.flac*";
public static String musicVideoFiles = "*.mid*.smf*.kar*.mod*.xm*.s3m*.it*.669*.amf*.dsm*.far*.gdm*.imf*.med*.mtm*.stm*.stx*.ult*.uni*.mp3*.m4a*.wav*.ogg*.flac*.mp4*.3gp*";
public static String playlistFiles = "*.tpl*";
public static String fontFiles = "*.sf2*.sfark*";

public static int[] validRates(boolean stereo, boolean sixteen)
{
	ArrayList<Integer> valid = new ArrayList<Integer>();
	for (int rate : new int[] {8000, 11025, 16000, 22050, 44100, 48000, 88200, 96000}) {  // add the rates you wish to check against
       
		int bufferSize = AudioTrack.getMinBufferSize(rate, (stereo)?AudioFormat.CHANNEL_OUT_STEREO:AudioFormat.CHANNEL_OUT_MONO, (sixteen)?AudioFormat.ENCODING_PCM_16BIT:AudioFormat.ENCODING_PCM_8BIT);
        if (bufferSize > 0) {
        	//System.out.println(rate+" "+bufferSize);
            // buffer size is valid, Sample rate supported
        	valid.add(rate);
        }
    }
	//System.out.println("hhh: "+AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM));
	int[] rates = new int[valid.size()];
	for(int i = 0; i<rates.length; i++)
		rates[i]=valid.get(i);
	return rates;
}
public static HashMap<Integer, Integer> validBuffers(int[] rates, boolean stereo, boolean sixteen)
{
	HashMap<Integer, Integer> buffers = new HashMap<Integer, Integer>();
	for(int rate : rates)
	{
		buffers.put(rate, AudioTrack.getMinBufferSize(rate, (stereo)?AudioFormat.CHANNEL_OUT_STEREO:AudioFormat.CHANNEL_OUT_MONO, (sixteen)?AudioFormat.ENCODING_PCM_16BIT:AudioFormat.ENCODING_PCM_8BIT));
	}
	return buffers;
}

//---------SETTINGS STORAGE----------
public static SharedPreferences prefs;
public static boolean firstRun;
public static int theme; // 1 = Light, 2 = Dark
public static boolean showHiddenFiles;
public static String defaultFolder;
public static String dataFolder;
public static boolean manConfig;
public static int defSamp;
//public static ArrayList<String> soundfonts; // this list should only be touched in SettingsActivity
public static boolean mono;
public static boolean sixteen;
public static int aRate;
public static int buff;
public static boolean nativeMidi;
public static boolean onlyNative=false;
public static boolean showVideos;
public static AssetManager assets;
public static void reloadSettings(Activity c, AssetManager assets)
{
	
	prefs = PreferenceManager
            .getDefaultSharedPreferences(c);
	firstRun = prefs.getBoolean("tplusFirstRun", true);
	theme = Integer.parseInt(prefs.getString("fbTheme", "1"));
	showHiddenFiles = prefs.getBoolean("hiddenSwitch", false);
	defaultFolder = prefs.getString("defaultPath", Environment.getExternalStorageDirectory().getAbsolutePath());
	dataFolder = prefs.getString("dataDir", Environment.getExternalStorageDirectory()+"/TimidityAE/");
	manConfig = prefs.getBoolean("manualConfig", false);
	JNIHandler.currsamp = defSamp = Integer.parseInt(prefs.getString("tplusResamp", "0"));
	mono = prefs.getString("sdlChanValue", "2").equals("1");
	sixteen = prefs.getString("tplusBits", "16").equals("16");
	aRate = Integer.parseInt(prefs.getString("tplusRate", Integer.toString(AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM))));
	buff = Integer.parseInt(prefs.getString("tplusBuff", "192000"));
	showVideos=prefs.getBoolean("videoSwitch", true);
	if(!onlyNative)
		nativeMidi = prefs.getBoolean("nativeMidiSwitch", false);
	else
		nativeMidi = true;
	
}
//-----------------------------------

public static boolean initialize(final AssetManager assets, final Activity a)
{
	if(firstRun)
	{
		//System.out.println("First run");
		final File rootStorage = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/TimidityAE/");
		if(!rootStorage.exists())
		{
			rootStorage.mkdir();
		}
		File playlistDir=new File(rootStorage.getAbsolutePath()+"/playlists/");
		if(!playlistDir.exists())
		{
			playlistDir.mkdir();
		}
		File tcfgDir=new File(rootStorage.getAbsolutePath()+"/timidity/");
		if(!tcfgDir.exists())
		{
			tcfgDir.mkdir();
		}
		File sfDir=new File(rootStorage.getAbsolutePath()+"/soundfonts/");
		if(!sfDir.exists())
		{
			sfDir.mkdir();
		}
		updateBuffers(updateRates());
		aRate = Integer.parseInt(prefs.getString("tplusRate", Integer.toString(AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM))));
		//System.out.println("Rate is: "+aRate);
		buff = Integer.parseInt(prefs.getString("tplusBuff", "192000"));
		migrateFrom1X(rootStorage);
		final Editor eee = prefs.edit();
		firstRun=false;
		eee.putBoolean("tplusFirstRun", false);
		eee.putString("dataDir", Environment.getExternalStorageDirectory().getAbsolutePath()+"/TimidityAE/");
		if(new File(dataFolder+"/timidity/timidity.cfg").exists())
		{
			if(manConfig = !cfgIsAuto(dataFolder+"/timidity/timidity.cfg"))
			{
				eee.putBoolean("manConfig", true);
			}else{
				//System.out.println("Parsing previous config");
				eee.putBoolean("manConfig", false);
				ArrayList<String> soundfonts = new ArrayList<String>();
				 FileInputStream fstream = null;
				try {
					fstream = new FileInputStream(dataFolder+"/timidity/timidity.cfg");
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
			  	  // Get the object of DataInputStream
			  	  DataInputStream in = new DataInputStream(fstream);
			  	  BufferedReader br = new BufferedReader(new InputStreamReader(in));
			  	  //Read File Line By Line
			  	  try {
					br.readLine(); // skip first line
				} catch (IOException e) {
					e.printStackTrace();
				}
			  	  String line;
			  	  try {
					while((line=br.readLine())!=null)
					  {
						if(line.indexOf("soundfont \"")>=0&&line.lastIndexOf('"')>=0)
						{
							try{
							String st=line.substring(line.indexOf("soundfont \"")+11,line.lastIndexOf('"'));
							soundfonts.add(st);
							}catch (ArrayIndexOutOfBoundsException e1)
							{
								e1.printStackTrace();
							}
						  
						}
					  }
				} catch (IOException e) {
					e.printStackTrace();
				}
			  	 try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			  	try {
					eee.putString("tplusSoundfonts", ObjectSerializer.serialize(soundfonts));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			eee.commit();
			return true;
		}else{
			// Should probably check if 8rock11e exists no matter what
			eee.putBoolean("manConfig", false);
			//pd = ProgressDialog.show(context, "Extracting...", "Extracting 8Rock11e.sf2", true);
			
			AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>() {
				
				ProgressDialog pd;
				@Override
				protected void onPreExecute() {
					pd = new ProgressDialog(a);
					pd.setTitle(a.getResources().getString(R.string.extract));
					pd.setMessage(a.getResources().getString(R.string.extract_sum));
					pd.setCancelable(false);
					pd.setIndeterminate(true);
					pd.show();
				}
					
				@Override
				protected Void doInBackground(Void... arg0) {
					extract8Rock(assets);
					return null;
				}
				
				@Override
				protected void onPostExecute(Void result) {
					if(pd!=null)
						pd.dismiss();
						ArrayList<String> tmpConfig = new ArrayList<String>();
						tmpConfig.add(rootStorage.getAbsolutePath()+"/soundfonts/8Rock11e.sf2");
						try {
							eee.putString("tplusSoundfonts", ObjectSerializer.serialize(tmpConfig));
						} catch (IOException e) {
							e.printStackTrace();
						}
						eee.commit();
						writeCfg(rootStorage.getAbsolutePath()+"/timidity/timidity.cfg",tmpConfig);
						((TimidityActivity)a).initCallback();
						//b.setEnabled(true);
				}
					
			};
			task.execute((Void[])null);
			return false;
		}
		
		
		
	}else{
		return true;
	}
}
public static void migrateFrom1X(File newData)
{
	File oldPlists = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/Android/data/com.xperia64.timidityae/playlists/");
	if(oldPlists.exists())
	{
		if(oldPlists.isDirectory())
		{
			for(File f : oldPlists.listFiles())
			{
				if(f.getName().toLowerCase(Locale.US).endsWith(".tpl"))
				{
					f.renameTo(new File(newData.getAbsolutePath()+"/playlists/"+f.getName()));
				}
			}
		}
	}
	File oldSoundfonts = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/Android/data/com.xperia64.timidityae/soundfonts/");
	if(oldSoundfonts.exists())
	{
		if(oldSoundfonts.isDirectory())
		{
			for(File f : oldSoundfonts.listFiles())
			{
				if(f.getName().toLowerCase(Locale.US).endsWith(".sf2")||f.getName().toLowerCase(Locale.US).endsWith(".sfark"))
				{
					f.renameTo(new File(newData.getAbsolutePath()+"/soundfonts/"+f.getName()));
				}
			}
		}
	}
}
public static void writeCfg(String path, ArrayList<String> soundfonts)
{
	if(!manConfig)
	{
		if(new File(path).exists())
		{
			if(cfgIsAuto(path))
			{
					new File(path).delete(); // Auto config, safe to delete
			}else{
					new File(path).renameTo(new File(path+".manualTimidityCfg."+Long.toString(System.currentTimeMillis()))); // manual config, rename for later
			}
		}
		FileWriter fw = null;
		try {
			fw = new FileWriter(path,false);
		} catch (IOException e) {
			e.printStackTrace();
		}
		  try {
			fw.write(autoSoundfontHeader+"\n");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		for(String s : soundfonts)
		{
			try {
				fw.write((s.startsWith("#")?"#":"")+"soundfont \""+s+"\"\n");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		  try {
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			} 
	}
}

public static boolean cfgIsAuto(String path)
{
	String firstLine="";
	try{
  	  FileInputStream fstream = new FileInputStream(path);
  	  DataInputStream in = new DataInputStream(fstream);
  	  BufferedReader br = new BufferedReader(new InputStreamReader(in));
  	  firstLine=br.readLine();

  	  in.close();
  	    }catch (Exception e){}
	return firstLine.contains(autoSoundfontHeader);
}
public static int[] updateRates()
{
	int[] values = Globals.validRates(prefs.getString("sdlChanValue","2").equals("2"), prefs.getString("tplusBits", "16").equals("16"));
    CharSequence[] hz = new CharSequence[values.length];
    CharSequence[] hzItems = new CharSequence[values.length];
    boolean validRate=false;
    for(int i = 0; i<values.length; i++)
    {
    	hz[i]=Integer.toString(values[i])+"Hz";
    	hzItems[i]=Integer.toString(values[i]);
    	if(prefs.getString("tplusRate", Integer.toString(AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM))).equals(hzItems[i]))
    	{
    			validRate=true;
    			break;
    	}
    }
  
    if(!validRate)
    	prefs.edit().putString("tplusRate",Integer.toString(AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM))).commit();
    
    return values;
}
public static boolean updateBuffers(int[] rata)
{
	HashMap<Integer, Integer> buffMap = Globals.validBuffers(rata, prefs.getString("sdlChanValue","2").equals("2"), prefs.getString("tplusBits", "16").equals("16"));
	int realMin = buffMap.get(Integer.parseInt(prefs.getString("tplusRate", Integer.toString(AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM)))));
	if(buff<realMin)
	{
		prefs.edit().putString("tplusBuff", Integer.toString(buff=realMin)).commit();
		return false;
	}
	return true;
}

public static int extract8Rock(AssetManager assets)
{
	InputStream in = null;
	try {
		in = assets.open("8Rock11e.sfArk");
	} catch (IOException e) {
		e.printStackTrace();
	}
	//System.out.println("extracting 8rock");
	File f = new File(Globals.dataFolder+"/soundfonts/8Rock11e.sfArk");
	if (f!=null)
		if(f.exists())
			f.delete();
    OutputStream out = null;
	try {
		out = new FileOutputStream( Globals.dataFolder+"/soundfonts/8Rock11e.sfArk" );
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	}
    byte buf[] = new byte[1024];
    int len;
    try {
		while( ( len = in.read( buf ) ) > 0 )
		    out.write( buf, 0, len );
	} catch (IOException e1) {
		e1.printStackTrace();
	}
    try {
		out.close();
	} catch (IOException e) {
		e.printStackTrace();
	}
    try {
		in.close();
	} catch (IOException e) {
		e.printStackTrace();
	}
    JNIHandler.decompressSFArk(Globals.dataFolder+"/soundfonts/8Rock11e.sfArk", "8Rock11e.sf2");
    //System.out.println("decompresed sfark");
    new File(Globals.dataFolder+"/soundfonts/8Rock11e.sfArk").delete();
    return 777;
}
// @formatter:off
/*
 * RESAMPLE_CSPLINE, 0
	RESAMPLE_LAGRANGE, 1
	RESAMPLE_GAUSS, 2
	RESAMPLE_NEWTON, 3
	RESAMPLE_LINEAR, 4
	RESAMPLE_NONE 5
 
/*
 * #define RC_ERROR	-1
#ifdef RC_NONE
#undef RC_NONE
#endif
#define RC_NONE		0
#define RC_QUIT		1
#define RC_NEXT		2
#define RC_PREVIOUS	3 // Restart this song at beginning, or the previous
			     song if we're less than a second into this one. 
#define RC_FORWARD	4
#define RC_BACK		5
#define RC_JUMP		6
#define RC_TOGGLE_PAUSE 7	Pause/continue 
#define RC_RESTART	8	/* Restart song at beginning 
#define RC_PAUSE	9	/* Really pause playing 
#define RC_CONTINUE	10	/* Continue if paused 
#define RC_REALLY_PREVIOUS 11	/* Really go to the previous song 
#define RC_CHANGE_VOLUME 12
#define RC_LOAD_FILE	13	/* Load a new midifile 
#define RC_TUNE_END	14	/* The tune is over, play it again sam? 
#define RC_KEYUP	15	/* Key up 
#define RC_KEYDOWN	16	/* Key down 
#define RC_SPEEDUP	17	/* Speed up 
#define RC_SPEEDDOWN	18	/* Speed down 
#define RC_VOICEINCR	19	/* Increase voices 
#define RC_VOICEDECR	20	/* Decrease voices 
#define RC_TOGGLE_DRUMCHAN 21	/* Toggle drum channel 
#define RC_RELOAD	22	/* Reload & Play 
#define RC_TOGGLE_SNDSPEC 23	/* Open/Close Sound Spectrogram Window 
#define RC_CHANGE_REV_EFFB 24
#define RC_CHANGE_REV_TIME 25
#define RC_SYNC_RESTART 26
#define RC_TOGGLE_CTL_SPEANA 27
#define RC_CHANGE_RATE	28
#define RC_OUTPUT_CHANGED      29
#define RC_STOP		30	/* Stop to play 
#define RC_TOGGLE_MUTE	31
#define RC_SOLO_PLAY	32
#define RC_MUTE_CLEAR	33*/
//@formatter:on

 
}
